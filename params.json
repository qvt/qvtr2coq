{"name":"QVTr2Coq","tagline":"Encoding QVT-R Transformations in Coq","body":"*QVTr2Coq* is a systematic embedding of the [QVT Relations](http://www.omg.org/spec/QVT/1.1/) (QVT-R) transformation language in Constructive Type Theory (CTT) as implemented by the [Coq proof assistant](http://coq.inria.fr/). The framework allows to manually construct and verify implementations of QVT-R transformation programs in Coq. Verified transformations can be used as a test oracle, i.e., for testing existing QVT-R transformation tools if they are in compliance with standardised semantics.\r\n\r\n## Description\r\n\r\nQVT-R semantics are complex and not well understood. At the present time, QVT-R semantics are implicitly modeled in tooling, but we cannot be sure if interpreters do what we expect the QVT-R specification to do.\r\n\r\nOne solution to this problem is to build a test oracle that can be utilised to semi-automatically construct reference implementations of individual transformations to test QVT-R execution engines. Because of the problem-oriented nature of the QVT-R language, there is a gap between specification and the actual interpretation of QVT-R programs. To ensure that a model transformation specified in QVT-R results in the intended behaviour, it must be tested.\r\n\r\nFor demonstration, we used the framework to generate a CTT specification from the well-known UML2RDBMS example transformation. The specification is then verified in a manual step and an implementation is extracted.\r\n\r\n## Features\r\n\r\nThe project consists of three Xtend-based transformations for encoding QVT-R in Coq,\r\n\r\n* *QVTr2Coq* translates QVTd programs to Coq specifications;\r\n* *Ecore2Coq* translates Ecore metamodels to Coq specifications;\r\n* *XMI2Coq* translates Ecore instances to Coq specifications.\r\n\r\n## Installing\r\n\r\n*QVTr2Coq* runs on the Eclipse Modeling Tools. The following steps assume a fresh installation of Eclipse. \r\n\r\n* Download Eclipse [Modeling Tools 4.3 (Kepler)](http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/keplersr1) (Kepler);\r\n* Download and install in Eclipse (through the **Help > Install New Software…**) menu the following archives in the given order:\r\n  + [Eclipse Xtext 2.5+](http://www.eclipse.org/modeling/tmf/downloads/?project=xtext) of the Model Development Tools (MDT) project;\r\n  + [Eclipse QVTd 0.10+](http://www.eclipse.org/mmt/downloads/?project=qvtd) of the Model to Model Transformation (MMT) project;\r\n* Download [QVTr2Coq](https://github.com/qvt/qvtr2coq/zipball/master)<!--(http://qvt.github.io/qvtr2coq/downloads/qvtr2coq-0.1.0.zip)-->;\r\n* Import the contained project through **File > Import > Existing Projects into Workspace…** into your Eclipse workspace.\r\n\r\nYou are ready to use the code generator to produce Coq specifications from QVT-R programs, Ecore metamodels and instances thereof. To do so, use the run configuration **Generate Coq Code**. The transformation searches in subfolder [models](http://github.com/qvt/qvtr2coq/tree/master/edu.kit.ipd.sdq.mdsd.qvtrelation2coq/models) for files ending with .qvtr, .ecore, and .xmi. Resulting Coq specifications (.v files) are placed into [src-gen](http://github.com/qvt/qvtr2coq/tree/master/edu.kit.ipd.sdq.mdsd.qvtrelation2coq/src-gen). \r\n\r\nTo use the generated Coq files, you need to install the [Coq proof assistant](http://coq.inria.fr/download), version 8.4 or higher. We recommend to download Coq bundled with CoqIDE.\r\n\r\n## Example Proof\r\n\r\nFolder [models](http://github.com/qvt/qvtr2coq/tree/master/edu.kit.ipd.sdq.mdsd.qvtrelation2coq/models) already contains QVT-R implementations together with their Ecore metamodels. One of them is the example transformation UML2RDBMS that maps UML to RDBMS models. It is the same version as that provided by the Eclipse QVTd project.\r\n\r\nIn folder [proof](http://github.com/qvt/qvtr2coq/tree/master/edu.kit.ipd.sdq.mdsd.qvtrelation2coq/proof), you will find the generated Coq specification of UML2RDBMS, complemented with an example proof. Several of the lemmas are general enough to be used in your own proofs, for instance package ListHelpers.\r\n\r\n<!--([see also](https://sdqweb.ipd.kit.edu/wiki/Testing_QVT-R_Transformation_Tools))-->\r\n\r\n## Publication\r\n* A. Rentschler, J. Terrell, S. Zschaler, L. Happe, R. Reussner. [*Testing QVT-R Transformation Tools with Coq-Verified Implementations*](http://could.finally.lead.to/paper.pdf). Submitted to the 7th International Conference on Model Transformation (ICMT'14).\r\n\r\n## Contributors\r\n* [Andreas Rentschler] (http://sdq.ipd.kit.edu/people/andreas_rentschler/) from Karlsruhe Institute of Technology\r\n* [Jeffrey Terrell] (http://www.inf.kcl.ac.uk/pg/terrellj/) from King's College, London\r\n* [Steffen Zschaler] (https://kclpure.kcl.ac.uk/portal/steffen.zschaler.html) from King's College, London\r\n\r\nThis research is a cooperation between King's College London (KCL) and Karlsruhe Institute of Technology (KIT).\r\nWork has partly been funded by the German Research Foundation (DFG) under grant No. RE 1674/5-1: [Model-Driven Methods and Tools for Performance Prediction and Capacity Planning of Component-Based Software Systems](http://www.ferdinand-project.org) and the Priority Programme SPP 1593: [Design For Future – Managed Software Evolution](http://www.dfg-spp1593.de).\r\n\r\n<img src=\"http://qvt.github.io/qvtr2coq/images/Logo_KIT.png\" alt=\"KIT\" height=\"70px\"/>&nbsp;&nbsp;&nbsp;&nbsp;\r\n<img src=\"http://qvt.github.io/qvtr2coq/images/Logo_KCL.png\" alt=\"KCL\" height=\"70px\"/>&nbsp;&nbsp;&nbsp;&nbsp;\r\n<img src=\"http://qvt.github.io/qvtr2coq/images/Logo_FERDINAND.png\" alt=\"FERDINAND\" height=\"50px\"/>&nbsp;&nbsp;\r\n<img src=\"http://qvt.github.io/qvtr2coq/images/Logo_PPADVERT.png\" alt=\"ADVERT\" height=\"70px\"/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}