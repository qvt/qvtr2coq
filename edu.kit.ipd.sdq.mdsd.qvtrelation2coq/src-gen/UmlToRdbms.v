(********************************************************************
   @name A verified implementation of QVT-R transformation UmlToRdbms.
   @date 2014/01/09 00:20:08
   @description Specification has been generated by QVTrelation2Coq.
   @see QVT-R Specification, Eclipse QVTd project, and the Coq Project.
 ********************************************************************)

Section UmlToRdbms.

(* Coq libraries *)
Require Import List.
(*Require Import ListHelpers.*)
Require Import Arith.
Require Import String.
Require Import Bool.
Require Import Equivalence.

(* use ++ operator instead of append, for example: ("a" ++ "b")%string *)
Delimit Scope string_scope with string.
Local Open Scope string_scope.
Bind Scope string_scope with string.
Open Scope list_scope.
Open Scope equiv_scope.

(* Metamodels. *)
Require Import UML.
Require Import RDBMS.

(* Define exists_t similar to exists but on Type (program domain, predicative) rather than Prop (logic domain, impredicative).
   "Predicativity is a vulnerability to Russell's paradox that the set S of sets that are not members of themselves can neither be a member of S, nor a non-member of S."
   When extracting a Haskell/Scheme/Ocaml/ML program, Props are removed and thus ignored. Thus we use Type for the root proposition together with exists_t.
 *)
Inductive ex_t (X:Type) (P : X->Type) : Type :=
ex_t_intro : forall (witness:X), P witness -> ex_t X P.
Notation "'exists_t' x : X , p" := (ex_t _ (fun x:X => p))
(at level 200, x ident, right associativity) : type_scope.

(********************************************************************
 Automatically extracted transformation specification
 ********************************************************************)

Definition PrimitiveTypeToSqlType (primitiveType : string) : string :=
	match (primitiveType) with
	| "INTEGER" => "NUMBER"
	| _ =>
		match (primitiveType) with
		| "BOOLEAN" => "BOOLEAN"
		| _ =>
			"VARCHAR"
		end
	end
.

Definition Top_PackageToSchema (uml : UML) (rdbms : RDBMS) :=
	(* When clause *)
	(* Source domain *)
	forall p : UML.Package,
	forall pn : string,
	(* Source constraints *)
	(
		(In p (UML.AllInstances_Package uml)) /\
		(pn = (UML.Project_Package_name p))
	) ->
	(* Target domain *)
	exists s : RDBMS.Schema,
	(* Target constraints *)
	(
		(In s (RDBMS.AllInstances_Schema rdbms)) /\
		(pn = (RDBMS.Project_Schema_name s))
	)
.

Definition PackageToSchema (uml : UML) (rdbms : RDBMS) (p : UML.Package) (s : RDBMS.Schema) :=
	(* Root variables *)
	(In p (UML.AllInstances_Package uml)) /\
	(In s (RDBMS.AllInstances_Schema rdbms)) /\
	(* When clause *)
	(* Source domain *)
	forall pn : string,
	(* Source constraints *)
	(
		(pn = (UML.Project_Package_name p))
	) ->
	(* Target domain *)
	(* Target constraints *)
	(
		(pn = (RDBMS.Project_Schema_name s))
	)
.

Definition PrimitiveAttributeToColumn (uml : UML) (rdbms : RDBMS) (c : UML.Class) (t : RDBMS.Table) (prefix : string) :=
	(* Root variables *)
	(In c (UML.AllInstances_Class uml)) /\
	(In t (RDBMS.AllInstances_Table rdbms)) /\
	(* When clause *)
	(* Source domain *)
	forall a : UML.Attribute,
	forall an : string,
	forall p : UML.PrimitiveDataType,
	forall pn : string,
	(* Source constraints *)
	(
		(In (a) (UML.Project_Class_attribute c)) /\
		(an = (UML.Project_Attribute_name a)) /\
		(inr (Some p) = (UML.Dereference_Attribute_type uml a)) /\
		(pn = (UML.Project_PrimitiveDataType_name p))
	) ->
	(* Target domain *)
	exists cl : RDBMS.Column,
	exists cn : string,
	exists sqltype : string,
	(* Target constraints *)
	(
		(In (cl) (RDBMS.Project_Table_column t)) /\
		(cn = (RDBMS.Project_Column_name cl)) /\
		(sqltype = (RDBMS.Project_Column_type cl))
	) /\
	(* Where clause *)
	(
		(cn = match (prefix) with
		| "" => an
		| _ =>
			((prefix ++ "_")%string ++ an)%string
		end
		) /\
		(sqltype = (PrimitiveTypeToSqlType pn))
	)
.

Inductive AttributeToColumn : UML -> RDBMS -> UML.Class -> RDBMS.Table -> string -> Prop :=
Definition_AttributeToColumn:
forall uml : UML,
forall rdbms : RDBMS,
forall c : UML.Class,
forall t : RDBMS.Table,
forall prefix : string,
(
	(* Root variables *)
	(In c (UML.AllInstances_Class uml)) /\
	(In t (RDBMS.AllInstances_Table rdbms)) /\
	(* When clause *)
	(* Source domain *)
	(* Source constraints *)
	(* Target domain *)
	(* Where clause *)
	(
		(PrimitiveAttributeToColumn uml rdbms c t prefix) /\
		(ComplexAttributeToColumn uml rdbms c t prefix) /\
		(SuperAttributeToColumn uml rdbms c t prefix)
	)
) -> (AttributeToColumn uml rdbms c t prefix)
with ComplexAttributeToColumn : UML -> RDBMS -> UML.Class -> RDBMS.Table -> string -> Prop :=
Definition_ComplexAttributeToColumn:
forall uml : UML,
forall rdbms : RDBMS,
forall c : UML.Class,
forall t : RDBMS.Table,
forall prefix : string,
(
	(* Root variables *)
	(In c (UML.AllInstances_Class uml)) /\
	(In t (RDBMS.AllInstances_Table rdbms)) /\
	(* When clause *)
	(* Source domain *)
	forall a : UML.Attribute,
	forall an : string,
	forall tc : UML.Class,
	(* Source constraints *)
	(
		(In (a) (UML.Project_Class_attribute c)) /\
		(an = (UML.Project_Attribute_name a)) /\
		(inl (Some tc) = (UML.Dereference_Attribute_type uml a))
	) ->
	(* Target domain *)
	(* Where clause *)
	exists newPrefix : string,
	(
		(newPrefix = ((prefix ++ "_")%string ++ an)%string) /\
		(AttributeToColumn uml rdbms tc t newPrefix)
	)
) -> (ComplexAttributeToColumn uml rdbms c t prefix)
with SuperAttributeToColumn : UML -> RDBMS -> UML.Class -> RDBMS.Table -> string -> Prop :=
Definition_SuperAttributeToColumn:
forall uml : UML,
forall rdbms : RDBMS,
forall c : UML.Class,
forall t : RDBMS.Table,
forall prefix : string,
(
	(* Root variables *)
	(In c (UML.AllInstances_Class uml)) /\
	(In t (RDBMS.AllInstances_Table rdbms)) /\
	(* When clause *)
	(* Source domain *)
	forall sc : UML.Class,
	(* Source constraints *)
	(
		(Some sc = (UML.Dereference_Class_general uml c))
	) ->
	(* Target domain *)
	(* Where clause *)
	(
		(AttributeToColumn uml rdbms sc t prefix)
	)
) -> (SuperAttributeToColumn uml rdbms c t prefix)
.

Definition Top_ClassToTable (uml : UML) (rdbms : RDBMS) :=
	(* When clause *)
	forall p : UML.Package,
	forall s : RDBMS.Schema,
	(
		(PackageToSchema uml rdbms p s)
	) ->
	(* Source domain *)
	forall c : UML.Class,
	forall cn : string,
	(* Source constraints *)
	(
		(In c (UML.AllInstances_Class uml)) /\
		(Some p = (UML.Dereference_Class_namespace uml c)) /\
		("Persistent" = (UML.Project_Class_kind c)) /\
		(cn = (UML.Project_Class_name c))
	) ->
	(* Target domain *)
	exists t : RDBMS.Table,
	exists cl : RDBMS.Column,
	exists k : RDBMS.Key,
	(* Target constraints *)
	(
		(In t (RDBMS.AllInstances_Table rdbms)) /\
		(Some s = (RDBMS.Dereference_Table_schema rdbms t)) /\
		(cn = (RDBMS.Project_Table_name t)) /\
		(In (cl) (RDBMS.Project_Table_column t)) /\
		((cn ++ "_tid")%string = (RDBMS.Project_Column_name cl)) /\
		("NUMBER" = (RDBMS.Project_Column_type cl)) /\
		(Some k = (RDBMS.Project_Table_hasKey t)) /\
		((cn ++ "_pk")%string = (RDBMS.Project_Key_name k)) /\
		(In (Some cl) (RDBMS.Dereference_Key_column rdbms k))
	) /\
	(* Where clause *)
	exists prefix : string,
	(
		(prefix = "") /\
		(AttributeToColumn uml rdbms c t prefix)
	)
.

Definition ClassToTable (uml : UML) (rdbms : RDBMS) (c : UML.Class) (t : RDBMS.Table) :=
	(* Root variables *)
	(In c (UML.AllInstances_Class uml)) /\
	(In t (RDBMS.AllInstances_Table rdbms)) /\
	(* When clause *)
	forall p : UML.Package,
	forall s : RDBMS.Schema,
	(
		(PackageToSchema uml rdbms p s)
	) ->
	(* Source domain *)
	forall cn : string,
	(* Source constraints *)
	(
		(Some p = (UML.Dereference_Class_namespace uml c)) /\
		("Persistent" = (UML.Project_Class_kind c)) /\
		(cn = (UML.Project_Class_name c))
	) ->
	(* Target domain *)
	exists cl : RDBMS.Column,
	exists k : RDBMS.Key,
	(* Target constraints *)
	(
		(Some s = (RDBMS.Dereference_Table_schema rdbms t)) /\
		(cn = (RDBMS.Project_Table_name t)) /\
		(In (cl) (RDBMS.Project_Table_column t)) /\
		((cn ++ "_tid")%string = (RDBMS.Project_Column_name cl)) /\
		("NUMBER" = (RDBMS.Project_Column_type cl)) /\
		(Some k = (RDBMS.Project_Table_hasKey t)) /\
		((cn ++ "_pk")%string = (RDBMS.Project_Key_name k)) /\
		(In (Some cl) (RDBMS.Dereference_Key_column rdbms k))
	) /\
	(* Where clause *)
	exists prefix : string,
	(
		(prefix = "") /\
		(AttributeToColumn uml rdbms c t prefix)
	)
.

Definition Top_AssocToFKey (uml : UML) (rdbms : RDBMS) :=
	(* When clause *)
	forall p : UML.Package,
	forall s : RDBMS.Schema,
	forall sc : UML.Class,
	forall srcTbl : RDBMS.Table,
	forall dc : UML.Class,
	forall destTbl : RDBMS.Table,
	forall pKey : RDBMS.Key,
	(
		(PackageToSchema uml rdbms p s) /\
		(ClassToTable uml rdbms sc srcTbl) /\
		(ClassToTable uml rdbms dc destTbl) /\
		(Some pKey = (RDBMS.Project_Table_hasKey destTbl))
	) ->
	(* Source domain *)
	forall a : UML.Association,
	forall an : string,
	forall scn : string,
	forall dcn : string,
	(* Source constraints *)
	(
		(In a (UML.AllInstances_Association uml)) /\
		(Some p = (UML.Dereference_Association_namespace uml a)) /\
		(an = (UML.Project_Association_name a)) /\
		(Some sc = (UML.Dereference_Association_source uml a)) /\
		("Persistent" = (UML.Project_Class_kind sc)) /\
		(scn = (UML.Project_Class_name sc)) /\
		(Some dc = (UML.Dereference_Association_destination uml a)) /\
		("Persistent" = (UML.Project_Class_kind dc)) /\
		(dcn = (UML.Project_Class_name dc))
	) ->
	(* Target domain *)
	exists fk : RDBMS.ForeignKey,
	exists fkn : string,
	exists fc : RDBMS.Column,
	exists fcn : string,
	(* Target constraints *)
	(
		(In fk (RDBMS.AllInstances_ForeignKey rdbms)) /\
		(Some s = (RDBMS.Dereference_ForeignKey_schema rdbms fk)) /\
		(fkn = (RDBMS.Project_ForeignKey_name fk)) /\
		(Some srcTbl = (RDBMS.Dereference_ForeignKey_owner rdbms fk)) /\
		(In (Some fc) (RDBMS.Dereference_ForeignKey_column rdbms fk)) /\
		(fcn = (RDBMS.Project_Column_name fc)) /\
		("NUMBER" = (RDBMS.Project_Column_type fc)) /\
		(Some srcTbl = (RDBMS.Dereference_Column_owner rdbms fc)) /\
		(Some pKey = (RDBMS.Dereference_ForeignKey_refersTo rdbms fk))
	) /\
	(* Where clause *)
	(
		(fkn = ((((scn ++ "_")%string ++ an)%string ++ "_")%string ++ dcn)%string) /\
		(fcn = (fkn ++ "_tid")%string)
	)
.

Definition AssocToFKey (uml : UML) (rdbms : RDBMS) (a : UML.Association) (fk : RDBMS.ForeignKey) :=
	(* Root variables *)
	(In a (UML.AllInstances_Association uml)) /\
	(In fk (RDBMS.AllInstances_ForeignKey rdbms)) /\
	(* When clause *)
	forall p : UML.Package,
	forall s : RDBMS.Schema,
	forall sc : UML.Class,
	forall srcTbl : RDBMS.Table,
	forall dc : UML.Class,
	forall destTbl : RDBMS.Table,
	forall pKey : RDBMS.Key,
	(
		(PackageToSchema uml rdbms p s) /\
		(ClassToTable uml rdbms sc srcTbl) /\
		(ClassToTable uml rdbms dc destTbl) /\
		(Some pKey = (RDBMS.Project_Table_hasKey destTbl))
	) ->
	(* Source domain *)
	forall an : string,
	forall scn : string,
	forall dcn : string,
	(* Source constraints *)
	(
		(Some p = (UML.Dereference_Association_namespace uml a)) /\
		(an = (UML.Project_Association_name a)) /\
		(Some sc = (UML.Dereference_Association_source uml a)) /\
		("Persistent" = (UML.Project_Class_kind sc)) /\
		(scn = (UML.Project_Class_name sc)) /\
		(Some dc = (UML.Dereference_Association_destination uml a)) /\
		("Persistent" = (UML.Project_Class_kind dc)) /\
		(dcn = (UML.Project_Class_name dc))
	) ->
	(* Target domain *)
	exists fkn : string,
	exists fc : RDBMS.Column,
	exists fcn : string,
	(* Target constraints *)
	(
		(Some s = (RDBMS.Dereference_ForeignKey_schema rdbms fk)) /\
		(fkn = (RDBMS.Project_ForeignKey_name fk)) /\
		(Some srcTbl = (RDBMS.Dereference_ForeignKey_owner rdbms fk)) /\
		(In (Some fc) (RDBMS.Dereference_ForeignKey_column rdbms fk)) /\
		(fcn = (RDBMS.Project_Column_name fc)) /\
		("NUMBER" = (RDBMS.Project_Column_type fc)) /\
		(Some srcTbl = (RDBMS.Dereference_Column_owner rdbms fc)) /\
		(Some pKey = (RDBMS.Dereference_ForeignKey_refersTo rdbms fk))
	) /\
	(* Where clause *)
	(
		(fkn = ((((scn ++ "_")%string ++ an)%string ++ "_")%string ++ dcn)%string) /\
		(fcn = (fkn ++ "_tid")%string)
	)
.

Theorem Transform:
	(* All top level relations need to be valid *)
	forall uml : UML, exists_t rdbms : RDBMS, 
	(Top_PackageToSchema uml rdbms) /\
	(Top_ClassToTable uml rdbms) /\
	(Top_AssocToFKey uml rdbms)
.
(********************************************************************
 Functional program that is supposed to adhere to the given specification
 ********************************************************************)

(* A functional implementation that performs the transformation. *)
(* A QVT-R engine computes such a solution to the specification. *)

(* TODO: Create a (possibly recursive) function that constructs a target model from a source model. *)

(********************************************************************
 Proof that our implementation satisfies the specification.
 ********************************************************************)
Proof.

(* TODO: Run proof here! *)

End UmlToRdbms.

(********************************************************************
 Extract program from proof (see Curry-Howard Isomorphism).
 ********************************************************************)
Extraction Language  Haskell. (*Ocaml.*)
Set Extraction Optimize.
Recursive Extraction UmlToRdbms.
Transform.
