(********************************************************************
   @name Coq definitions for metamodel UML
   @date 2014/01/09 00:20:08
   @description Automatically generated by QVTrelation2Coq transformation.
   @see QVT-R Specification, Eclipse QVTd project, and the Coq Project.
 ********************************************************************)

Section UML.

(* Coq libraries *)
Require Import List.
Require Import String.
Require Import Arith.
Require Import Bool.

(********************************************************************)
(* EEnums: need to be defined first. *)

(********************************************************************)
(* EClasses: defined by constructors of an ID, local attributes and references. *)

Record Attribute_OID : Set := Build_Attribute_OID { 
	Project_Attribute_OID_nat : nat 
}.
Record Association_OID : Set := Build_Association_OID { 
	Project_Association_OID_nat : nat 
}.
Record Class_OID : Set := Build_Class_OID { 
	Project_Class_OID_nat : nat 
}.
Record PrimitiveDataType_OID : Set := Build_PrimitiveDataType_OID { 
	Project_PrimitiveDataType_OID_nat : nat 
}.
Record Package_OID : Set := Build_Package_OID { 
	Project_Package_OID_nat : nat 
}.

Record Attribute : Set := Build_Attribute {
	Project_Attribute_oid : Attribute_OID;
	Project_Attribute_name : string;
	Project_Attribute_type : (*Classifier*) (Class_OID + PrimitiveDataType_OID)
	(*Project_Attribute_owner : Class_OID;*)
}.
Record Classifier : Set := Build_Classifier {
	Project_Classifier_name : string
	(*Project_Classifier_typeOf : list Attribute_OID;*)
	(*Project_Classifier_namespace : Package_OID;*)
}.
Record Association : Set := Build_Association {
	Project_Association_oid : Association_OID;
	Project_Association_name : string;
	Project_Association_source : Class_OID;
	Project_Association_destination : Class_OID
	(*Project_Association_namespace : Package_OID;*)
}.
Record Class : Set := Build_Class {
	Project_Class_oid : Class_OID;
	Project_Class_classifier : Classifier;
	Project_Class_kind : string;
	Project_Class_attribute : list Attribute;
	Project_Class_general : option Class_OID
	(*Project_Class_subclass : list Class_OID;*)
	(*Project_Class_sourceOf : list Association_OID;*)
	(*Project_Class_destinationOf : list Association_OID;*)
}.
Record PrimitiveDataType : Set := Build_PrimitiveDataType {
	Project_PrimitiveDataType_oid : PrimitiveDataType_OID;
	Project_PrimitiveDataType_classifier : Classifier
}.
Record Package : Set := Build_Package {
	Project_Package_oid : Package_OID;
	Project_Package_name : string;
	Project_Package_classifier : list (*Classifier*) (Class + PrimitiveDataType);
	Project_Package_association : list Association
}.

Record UML := Build {
	Content : list Package
}.

(********************************************************************)
(* EStructuralFeatures: projections of inherited attributes. *)

Definition Project_Class_name (o : Class) :=
	 Project_Classifier_name (Project_Class_classifier o).
Definition Project_PrimitiveDataType_name (o : PrimitiveDataType) :=
	 Project_Classifier_name (Project_PrimitiveDataType_classifier o).

(********************************************************************)
(* EAllInstances: Collecting all instances of a certain type in a model. *)

Definition AllInstances_Package (uml : UML) : list Package :=
	(Content uml).
Fixpoint Filter_PrimitiveDataType (l : list (*Classifier*) (Class + PrimitiveDataType)) : list PrimitiveDataType :=
	match l with
	| inr (l_head) :: l_tail =>
		l_head :: (Filter_PrimitiveDataType l_tail)
	| _ :: l_tail => (Filter_PrimitiveDataType l_tail)
	| nil => nil
	end.

Definition AllInstances_PrimitiveDataType (uml : UML) : list PrimitiveDataType :=
	(flat_map (fun o =>
			Filter_PrimitiveDataType (Project_Package_classifier o)
		)
		(AllInstances_Package uml)
	).
Fixpoint Filter_Class (l : list (*Classifier*) (Class + PrimitiveDataType)) : list Class :=
	match l with
	| inl (l_head) :: l_tail =>
		l_head :: (Filter_Class l_tail)
	| _ :: l_tail => (Filter_Class l_tail)
	| nil => nil
	end.

Definition AllInstances_Class (uml : UML) : list Class :=
	(flat_map (fun o =>
			Filter_Class (Project_Package_classifier o)
		)
		(AllInstances_Package uml)
	).

Definition AllInstances_Association (uml : UML) : list Association :=
	(flat_map Project_Package_association
		(AllInstances_Package uml)
	).

Definition AllInstances_Attribute (uml : UML) : list Attribute :=
	(flat_map Project_Class_attribute
		(AllInstances_Class uml)
	).

(********************************************************************)
(* EReference[containment = false]: Resolving forward cross references (=> resolve OID). *)

Function Find_Attribute (l : list Attribute) (oid : Attribute_OID) : option Attribute := 
	match l with
	| l_head::l_tail => 
		if beq_nat (Project_Attribute_OID_nat (Project_Attribute_oid l_head)) (Project_Attribute_OID_nat oid) 
		then Some l_head
		else (Find_Attribute l_tail oid)
	| nil => None
	end.
Function Dereference_Attribute (uml : UML) (oid : Attribute_OID) : option Attribute :=
	(Find_Attribute (AllInstances_Attribute uml) oid).
Function Find_Association (l : list Association) (oid : Association_OID) : option Association := 
	match l with
	| l_head::l_tail => 
		if beq_nat (Project_Association_OID_nat (Project_Association_oid l_head)) (Project_Association_OID_nat oid) 
		then Some l_head
		else (Find_Association l_tail oid)
	| nil => None
	end.
Function Dereference_Association (uml : UML) (oid : Association_OID) : option Association :=
	(Find_Association (AllInstances_Association uml) oid).
Function Find_Class (l : list Class) (oid : Class_OID) : option Class := 
	match l with
	| l_head::l_tail => 
		if beq_nat (Project_Class_OID_nat (Project_Class_oid l_head)) (Project_Class_OID_nat oid) 
		then Some l_head
		else (Find_Class l_tail oid)
	| nil => None
	end.
Function Dereference_Class (uml : UML) (oid : Class_OID) : option Class :=
	(Find_Class (AllInstances_Class uml) oid).
Function Find_PrimitiveDataType (l : list PrimitiveDataType) (oid : PrimitiveDataType_OID) : option PrimitiveDataType := 
	match l with
	| l_head::l_tail => 
		if beq_nat (Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid l_head)) (Project_PrimitiveDataType_OID_nat oid) 
		then Some l_head
		else (Find_PrimitiveDataType l_tail oid)
	| nil => None
	end.
Function Dereference_PrimitiveDataType (uml : UML) (oid : PrimitiveDataType_OID) : option PrimitiveDataType :=
	(Find_PrimitiveDataType (AllInstances_PrimitiveDataType uml) oid).
Function Find_Package (l : list Package) (oid : Package_OID) : option Package := 
	match l with
	| l_head::l_tail => 
		if beq_nat (Project_Package_OID_nat (Project_Package_oid l_head)) (Project_Package_OID_nat oid) 
		then Some l_head
		else (Find_Package l_tail oid)
	| nil => None
	end.
Function Dereference_Package (uml : UML) (oid : Package_OID) : option Package :=
	(Find_Package (AllInstances_Package uml) oid).

Definition Dereference_Attribute_type (uml : UML) (o : Attribute) : (*Classifier*) (option Class + option PrimitiveDataType) := 
	let oid := (Project_Attribute_type o) in
	(match oid with
	| inl (oid') => inl ((Dereference_Class uml oid'))
	| inr (oid') => inr ((Dereference_PrimitiveDataType uml oid'))
	end
	).
Definition Dereference_Association_source (uml : UML) (o : Association) : option Class := 
	let oid := (Project_Association_source o) in
	(Dereference_Class uml oid).
Definition Dereference_Association_destination (uml : UML) (o : Association) : option Class := 
	let oid := (Project_Association_destination o) in
	(Dereference_Class uml oid).
Definition Dereference_Class_general (uml : UML) (o : Class) : option Class := 
	match (Project_Class_general o) with
	| Some oid => (*Some *) (Dereference_Class uml oid)
	| None => None
	end.

(********************************************************************)
(* EReference[containment = false]: Resolving backward cross references *)

Definition Dereference_Class_typeOf (uml : UML) (o : Class) : list Attribute := 
	(filter 
		(fun o' => match (Dereference_Attribute_type uml o') with
			| inl (Some o'') =>
				beq_nat 
					(Project_Class_OID_nat (Project_Class_oid o'')) 
					(Project_Class_OID_nat (Project_Class_oid o))
			| _ => false
			end)
		(AllInstances_Attribute uml)
	).
Definition Dereference_Class_subclass (uml : UML) (o : Class) : list Class := 
	(filter 
		(fun o' => match (Dereference_Class_general uml o') with
			| Some o'' =>
				beq_nat 
					(Project_Class_OID_nat (Project_Class_oid o'')) 
					(Project_Class_OID_nat (Project_Class_oid o))
			| _ => false
			end)
		(AllInstances_Class uml)
	).
Definition Dereference_Class_sourceOf (uml : UML) (o : Class) : list Association := 
	(filter 
		(fun o' => match (Dereference_Association_source uml o') with
			| Some o'' =>
				beq_nat 
					(Project_Class_OID_nat (Project_Class_oid o'')) 
					(Project_Class_OID_nat (Project_Class_oid o))
			| _ => false
			end)
		(AllInstances_Association uml)
	).
Definition Dereference_Class_destinationOf (uml : UML) (o : Class) : list Association := 
	(filter 
		(fun o' => match (Dereference_Association_destination uml o') with
			| Some o'' =>
				beq_nat 
					(Project_Class_OID_nat (Project_Class_oid o'')) 
					(Project_Class_OID_nat (Project_Class_oid o))
			| _ => false
			end)
		(AllInstances_Association uml)
	).
Definition Dereference_PrimitiveDataType_typeOf (uml : UML) (o : PrimitiveDataType) : list Attribute := 
	(filter 
		(fun o' => match (Dereference_Attribute_type uml o') with
			| inr (Some o'') =>
				beq_nat 
					(Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o'')) 
					(Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o))
			| _ => false
			end)
		(AllInstances_Attribute uml)
	).

(********************************************************************)
(* EReference[containment = true]: Backward reference on containment hierarchy *)

Definition Dereference_Attribute_owner (uml : UML) (o : Attribute) : option Class := 
	(find 
		(fun o' => 
			let contained := 
			(Project_Class_attribute o') in
			existsb (fun o'' => 
				beq_nat 
					(Project_Attribute_OID_nat (Project_Attribute_oid o'')) 
					(Project_Attribute_OID_nat (Project_Attribute_oid o))
			) contained
		)
		(AllInstances_Class uml)
	).
Definition Dereference_Association_namespace (uml : UML) (o : Association) : option Package := 
	(find 
		(fun o' => 
			let contained := 
			(Project_Package_association o') in
			existsb (fun o'' => 
				beq_nat 
					(Project_Association_OID_nat (Project_Association_oid o'')) 
					(Project_Association_OID_nat (Project_Association_oid o))
			) contained
		)
		(AllInstances_Package uml)
	).
Definition Dereference_Class_namespace (uml : UML) (o : Class) : option Package := 
	(find 
		(fun o' => 
			let contained := (Filter_Class
			(Project_Package_classifier o')) in
			existsb (fun o'' => 
				beq_nat 
					(Project_Class_OID_nat (Project_Class_oid o'')) 
					(Project_Class_OID_nat (Project_Class_oid o))
			) contained
		)
		(AllInstances_Package uml)
	).
Definition Dereference_PrimitiveDataType_namespace (uml : UML) (o : PrimitiveDataType) : option Package := 
	(find 
		(fun o' => 
			let contained := (Filter_PrimitiveDataType
			(Project_Package_classifier o')) in
			existsb (fun o'' => 
				beq_nat 
					(Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o'')) 
					(Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o))
			) contained
		)
		(AllInstances_Package uml)
	).

(********************************************************************)
(* Hypotheses *)
(* OIDs are unique within an instance of this model per type. *)
(* Note that, if we are being given this as an input model, we can 
   declare this an axiom. For models we are generating, we will 
   need to keep this as a hypothesis, so that we will keep it
   as a proof obligation for the transformation proof. *)

Axiom PackageOIDsAreUnique:
	forall uml : UML,
	forall o1 o2 : Package,
		In o1 (AllInstances_Package uml) /\
		In o2 (AllInstances_Package uml) /\
		((beq_nat (Project_Package_OID_nat (Project_Package_oid o1))
			(Project_Package_OID_nat (Project_Package_oid o2))) = true) ->
		o1 = o2.
Axiom PrimitiveDataTypeOIDsAreUnique:
	forall uml : UML,
	forall o1 o2 : PrimitiveDataType,
		In o1 (AllInstances_PrimitiveDataType uml) /\
		In o2 (AllInstances_PrimitiveDataType uml) /\
		((beq_nat (Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o1))
			(Project_PrimitiveDataType_OID_nat (Project_PrimitiveDataType_oid o2))) = true) ->
		o1 = o2.
Axiom ClassOIDsAreUnique:
	forall uml : UML,
	forall o1 o2 : Class,
		In o1 (AllInstances_Class uml) /\
		In o2 (AllInstances_Class uml) /\
		((beq_nat (Project_Class_OID_nat (Project_Class_oid o1))
			(Project_Class_OID_nat (Project_Class_oid o2))) = true) ->
		o1 = o2.
Axiom AssociationOIDsAreUnique:
	forall uml : UML,
	forall o1 o2 : Association,
		In o1 (AllInstances_Association uml) /\
		In o2 (AllInstances_Association uml) /\
		((beq_nat (Project_Association_OID_nat (Project_Association_oid o1))
			(Project_Association_OID_nat (Project_Association_oid o2))) = true) ->
		o1 = o2.
Axiom AttributeOIDsAreUnique:
	forall uml : UML,
	forall o1 o2 : Attribute,
		In o1 (AllInstances_Attribute uml) /\
		In o2 (AllInstances_Attribute uml) /\
		((beq_nat (Project_Attribute_OID_nat (Project_Attribute_oid o1))
			(Project_Attribute_OID_nat (Project_Attribute_oid o2))) = true) ->
		o1 = o2.

End UML.
